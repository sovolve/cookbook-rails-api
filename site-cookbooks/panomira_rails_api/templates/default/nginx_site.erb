upstream rails_api_unicorn {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  
  # for UNIX domain socket setups:
  server unix:/tmp/unicorn.sock;
}

server {
  listen       80;
  server_name  <%= node.rails_api.subdomain %>.<%= node.domain %>

  #access_log  logs/host.access.log  main;

  root <%= node.rails_api.path %>/current;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
        
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time. Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;
         
  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    # http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  
    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    proxy_set_header X-Forwarded-Proto $scheme;
                         
    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;
                          
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
                                        
    proxy_pass http://rails_api_unicorn;
  }

  #error_page  404              /404.html;

  # redirect server error pages to the static page /50x.html
        #
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   html;
  }
}
